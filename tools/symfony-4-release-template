#!/usr/bin/env sh

USER="web-server"
PROJECT="project_name"
GIT_REPO="git path"

if [[ "$(whoami)" != "${USER}" ]]; then
    echo "Invalid user"
    exit
fi

PROJECT_ROOT=/srv/domains/${PROJECT}/www
VAR_ROOT=$PROJECT_ROOT/var

RELEASE_VERSION=`date +"%Y%m%d%H%M%S"`

RELEASE_DIR=$PROJECT_ROOT/release/$RELEASE_VERSION

mkdir -p $RELEASE_DIR || exit 1

cd $RELEASE_DIR || exit 1

# new release

git clone --depth=1 ${GIT_REPO} $RELEASE_DIR || exit 1

# composer

ln -sn $VAR_ROOT/config/.env $RELEASE_DIR/.env || exit 1

APP_ENV=prod php /bin/composer install --no-dev --optimize-autoloader || exit 1

# migration

php $RELEASE_DIR/bin/console doctrine:migrations:migrate --env=prod --no-interaction

# cache

php $RELEASE_DIR/bin/console cache:warmup --env=prod
php $RELEASE_DIR/bin/console assets:install --env=prod

# delete

rm -rf $RELEASE_DIR/.git || exit 1
rm -rf $RELEASE_DIR/.gitignore || exit 1
rm -rf $RELEASE_DIR/var/log || exit 1
rm -rf $RELEASE_DIR/var/sessions || exit 1

# symlink

ln -sn $VAR_ROOT/log $RELEASE_DIR/var/log || exit 1
ln -sn $VAR_ROOT/sessions $RELEASE_DIR/var/sessions || exit 1

# crontab

#/usr/bin/crontab $RELEASE_DIR/app/config/crontab

# switch to new release

ln -snf $RELEASE_DIR $PROJECT_ROOT/current || exit 1
echo $RELEASE_DIR $PROJECT_ROOT/current

# delete old releases

php -r '

    $releaseDir = "/srv/domains/${PROJECT}/www/release";
    $dirs = [];
    $maxDirs = 5;

    foreach (new DirectoryIterator($releaseDir) as $fileInfo) {
        if ($fileInfo->isDot()) { continue; }
        $dirs[] = $fileInfo->getFilename();
    }
    asort($dirs);

    do {

        if (\count($dirs) <= $maxDirs) { break; }

        $dirForDelete = array_shift($dirs);
        $dirForDelete = $releaseDir . "/" . $dirForDelete;

        echo "Delete old release: " . $dirForDelete . "\n";
        exec("rm -rf " . $dirForDelete);

    } while (true);

'
